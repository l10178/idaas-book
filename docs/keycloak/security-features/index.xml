<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全增强功能 on IDaaS Book</title><link>https://www.nxest.com/idaas-book/docs/keycloak/security-features/</link><description>Recent content in 安全增强功能 on IDaaS Book</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>Copyright (c) 2020-2024 nxest.com</copyright><lastBuildDate>Sun, 07 Apr 2024 17:25:36 +0800</lastBuildDate><atom:link href="https://www.nxest.com/idaas-book/docs/keycloak/security-features/index.xml" rel="self" type="application/rss+xml"/><item><title>MFA-OTP</title><link>https://www.nxest.com/idaas-book/docs/keycloak/security-features/mfa/</link><pubDate>Mon, 14 Dec 2020 23:54:37 +0800</pubDate><guid>https://www.nxest.com/idaas-book/docs/keycloak/security-features/mfa/</guid><description>MFA 即 Multi-Factor Authentication，多重身份认证，多因子认证，多因素认证。当然也包含等保要求中常说的双因子认证 2FA。
常见的实现如 U 盾、短信、邮件、指纹识别、面部识别等，在账户+密码基础上，进行二次或多次认证，增强数据安全。
Keycloak 提供了基于 OTP（One-Time Password，一次性密码，动态口令）的开箱即用的解决方案。
使用步骤 直接上图看效果。
各个 Realm 默认的浏览器认证流中，OTP 是CONDITIONAL，是一个条件可选项。 为用户配置启用 OTP 认证。 用户登录，未注册设备，要求注册设备。 手机端下载支持的 OTP 软件，如 FreeOTP，Google Authenticator。扫描注册，注册成功后就能看到已经生成一次性口令。 登录时就会要求输入一次性验证码。 注册成功后，可以在管理控制台看到用户注册的设备，用户也可以在自己的账户页面看到注册的设备。如果手机丢了想重新注册，把已有的记录删掉就可以，删掉后下次登录会要求重新注册。
管理控制台: 自己的账户页面：
扩展认证方式 如果想自己实现认证方式，官方也提供了详细的 SPI 开发指导，我们根据指导用一天时间实现了一个短信验证码。待开源。
名字解释 OTP One-Time Password，一般翻译为一次性密码、动态口令、动态验证码。
HOTP HMAC-based One-Time Password，使用计数方式基于 HMAC 算法加密。算法协议为 RFC 2104.
TOTP Time-based One-Time Password，基于时间戳算法，是时间同步，基于客户端的动态口令和服务器的时间比对，一般每 N 秒产生一个新口令，要求客户端和服务器能够保持正确的时钟，客户端和服务端基于时间计算的动态口令才能一致。算法协议为 RFC 6238.
开源实现
FreeOTP。 Google Authenticator。</description></item><item><title>密码策略</title><link>https://www.nxest.com/idaas-book/docs/keycloak/security-features/password-policies/</link><pubDate>Mon, 14 Dec 2020 23:54:37 +0800</pubDate><guid>https://www.nxest.com/idaas-book/docs/keycloak/security-features/password-policies/</guid><description>密码策略，常见的如密码最小长度、必须包含特殊字符、密码不能与历史密码相同等。控制用户在修改密码时，新密码必须满足一定的条件，从而增强密码安全。
Keycloak 内置了丰富的密码策略，满足常用的需求，不过默认都是不启用的，需要管理员主动设置。
启用方式，单击 Authentication 菜单，选择 Password Policy 选项卡。 在右侧下拉列表框中选择要添加的策略。根据策略提示设置不同的参数，保存。
密码策略只对新创建用户，或者用户修改密码生效，对已有用户不生效。如果想更快生效，就强制用户必须修改密码，在用户的 Required User Actions 里增加 Update Password 。
密码策略类型 HashAlgorithm
哈希算法，密码加密算法，以此算法存储，可根据官方指导自己实现算法。
Hashing Iterations
哈希次数，指定密码在存储或验证之前被哈希的次数。 多次哈希防止数据库泄露后，密码被暴力破解。哈希次数越多安全性越高，性能越差。
Minimum Length
密码最小长度。加大密码长度才是最有效的安全措施，什么大小写数字都是骗人的。
Digits
密码里必须包含 N 个数字。
Lowercase Characters
密码里必须包含 N 个小写字母。
Uppercase Characters
密码里必须包含 N 个大写字母。
Special Characters
密码里必须包含 N 个特殊字符，特殊字符如 ?!#%$ 。
Not Username
不能是当前用户名。
Not Email
不能是当前用户的邮箱。
Regular Expression
正则表达式，用 java.util.regex.Pattern 解析。
Expire Password
密码有效期，过期时间， N 天。超过这个时间后，用户必须修改密码。
Not Recently Used
密码历史，不能是最近使用过的 N 个密码。</description></item><item><title>暴力检测</title><link>https://www.nxest.com/idaas-book/docs/keycloak/security-features/brute-force-detection/</link><pubDate>Fri, 04 Dec 2020 23:54:37 +0800</pubDate><guid>https://www.nxest.com/idaas-book/docs/keycloak/security-features/brute-force-detection/</guid><description>Brute Force Detection 暴力检测，防止密码暴力破解，登录失败 N 次锁定。
启用暴力检测 控制台选择 Realm，设置：Realm Settings -&amp;gt; Security Defenses -&amp;gt; Brute Force Detection。
Permanent Lockout
ON 表示永久锁定。
OFF 表示临时锁定。
Max Login Failures
登录失败达到多少次时，锁定账号。
Quick Login Check Milli Seconds
快速登录检测，两次登录请求之间的时间间隔（单位毫秒）小于该值时，则认定为快速登录。
Minimum Quick Login Wait
一旦被认定为快速登录，该账号将被临时锁定为该配置项配置的时长。
解除锁定 临时锁定用户，达到锁定时长后，会自动解锁。
管理员在用户列表或用户详情里可以手动解锁。
注意事项 失败次数统计仅与登录账号相关，与会话无关，关闭重启浏览器，次数不会重置。 用户锁定后，给出的错误提示还是默认的用户名密码错误，就是不想让攻击者知道用户暂时被禁用了。</description></item></channel></rss>