'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/idaas-book/keycloak/getting-started/','title':"Keycloak 简介",'content':"keycloak 是一个开源的、面向现代应用和服务的 IAM（身份认证和访问控制）解决方案。\n主要功能：\n SSO\n单点登录（Single-Sign On），支持 OpenID Connect、OAuth 2.0、SAML 2.0 标准协议。 Identity Brokering and Social Login\n通过配置，可实现对不同身份认证服务的集成，通过这些身份认证服务登录应用。如 GitHub、Google 等，开源社区也有人提供了微信集成方案。 User Federation\n用户联合，提供了对 LDAP、Active Directory、Kerberos 的集成方案。 Client Adapters\n不同平台多种语言的支持，Java、Python、Go、Node.js、Spring、Quarkus 等。 后台管理\n提供了多种语言的后台管理界面，如果想偷懒的话改改图标定制个主题就能拿来用。同时还有 CLI 、SDK 和 RESTful API。 授权服务\n提供基于 RBAC、ABAC、UBAC 等多种策略的授权功能。 其他常用功能\n密码策略、暴力检测、MFA、日志审计。  选型参考 为什么可能选他：\n Redhat 开源，CNCF 项目，稳定质量可靠，一直在演进和更新。 易开发易扩展，相对 CAS，尤其是对于 Java 开发者。 功能丰富易用，如果只是要一个简单的 IAM，几乎是开箱即用。 标准实现，易集成，大厂背书。Kubernetes、Grafana、Kibana、Rancher、Vault、Harbor、Jenkins、Activiti 等等天然支持。  为什么可能不选他：\n 如果你有定制开发的话，版本升级并不友好，也不太难，因人而异。 中文并不友好，包括界面中的中文翻译其实不符合国人习惯，这也是为啥有 IDaaS Book 这个项目。  名词解释 IAM Identity and Access Management，身份认证和访问控制。\nMFA Multi-Factor Authentication，多重身份认证，多因子认证。\n"});index.add({'id':1,'href':'/idaas-book/keycloak/troubleshooting/export-import-on-k8s/','title':"Kubernetes中导入导出",'content':"问题描述 我的 keycloak 集群是跑在 Kubernetes 上，初始化了一些配置想完整的导出来。\n比如按照官方的指导文档，在 keycloak pod 内用下面的命令导出。\n./standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=keycloak-export.json 出现类似下面错误。\nERROR [org.jboss.as.controller.management-operation] (Controller Boot Thread) WFLYCTL0013: Operation (\u0026quot;add\u0026quot;) failed - address: ([ (\u0026quot;core-service\u0026quot; =\u0026gt; \u0026quot;management\u0026quot;), (\u0026quot;management-interface\u0026quot; =\u0026gt; \u0026quot;http-interface\u0026quot;) ]) - failure description: { \u0026quot;WFLYCTL0080: Failed services\u0026quot; =\u0026gt; {\u0026quot;org.wildfly.management.http.extensible\u0026quot; =\u0026gt; \u0026quot;java.net.BindException: Address already in use /127.0.0.1:9990\u0026quot;}, \u0026quot;WFLYCTL0288: One or more services were unable to start due to one or more indirect dependencies not being available.\u0026quot; =\u0026gt; { \u0026quot;Services that were unable to start:\u0026quot; =\u0026gt; [\u0026quot;org.wildfly.management.http.extensible.shutdown\u0026quot;], \u0026quot;Services that may be the cause:\u0026quot; =\u0026gt; [\u0026quot;jboss.remoting.remotingConnectorInfoService.http-remoting-connector\u0026quot;] } } 问题原因 根据错误提示，端口被占用，原因是 keycloak 导出脚本也会启动 Wildfly 服务，默认的 http、https、management 等的端口已经被占用。\n解决方案 命令行增加环境变量-Djboss.socket.binding.port-offset=100，指定不同的服务端口进行导出。\nkubectl -n keycloak exec -it keycloak-0 -- /opt/jboss/keycloak/bin/standalone.sh -Djboss.socket.binding.port-offset=100 -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/tmp 导出成功后，Ctrl-C 停止导出的进程，再通过 kubectl cp 将文件复制出来。\n另外注意导出的文件我放在了 /tmp 里，因为 pod 里默认的用户没有写权限。\n如果导出的配置比较复杂，比如包含授权策略，导入时还可能会出现以下错误。\nFATAL [org.keycloak.services] (ServerService Thread Pool -- 63) java.lang.RuntimeException: Script upload is disabled 解决方案，在导入命令里再追加一个环境变量。\n-Dkeycloak.profile.feature.upload_scripts=enabled 注意事项  管理控制台也能导入导出，不过导出的不全，比如密码密钥肯定时无法导出的。 导出的文件是普通的 json 文件，可以按照他现有的格式根据需要自己去写，不必每次改动都导出一次。 Realm 配置、用户、Client 都可以通过 kcadm.sh 分别导入，所以如果有一些特殊定制，可以考虑将配置分开后独立导入。  "});index.add({'id':2,'href':'/idaas-book/keycloak/security-features/mfa/','title':"MFA-OTP",'content':"MFA 即 Multi-Factor Authentication，多重身份认证，多因子认证，多因素认证。当然也包含等保要求中常说的双因子认证 2FA。\n常见的实现如 U 盾、短信、邮件、指纹识别、面部识别等，在账户+密码基础上，进行二次或多次认证，增强数据安全。\nKeycloak 提供了基于 OTP（One-Time Password，一次性密码，动态口令）的开箱即用的解决方案。\n使用步骤 直接上图看效果。\n 各个 Realm 默认的浏览器认证流中，OTP 是CONDITIONAL，是一个条件可选项。  为用户配置启用 OTP 认证。  用户登录，未注册设备，要求注册设备。  手机端下载支持的 OTP 软件，如 FreeOTP，Google Authenticator。扫描注册，注册成功后就能看到已经生成一次性口令。  登录时就会要求输入一次性验证码。  注册成功后，可以在管理控制台看到用户注册的设备，用户也可以在自己的账户页面看到注册的设备。如果手机丢了想重新注册，把已有的记录删掉就可以，删掉后下次登录会要求重新注册。\n管理控制台:  自己的账户页面：\n  扩展认证方式 如果想自己实现认证方式，官方也提供了详细的 SPI 开发指导，我们根据指导用一天时间实现了一个短信验证码。待开源。\n名字解释 OTP One-Time Password，一般翻译为一次性密码、动态口令、动态验证码。\nHOTP HMAC-based One-Time Password，使用计数方式基于 HMAC 算法加密。算法协议为 RFC 2104.\nTOTP Time-based One-Time Password，基于时间戳算法，是时间同步，基于客户端的动态口令和服务器的时间比对，一般每 N 秒产生一个新口令，要求客户端和服务器能够保持正确的时钟，客户端和服务端基于时间计算的动态口令才能一致。算法协议为 RFC 6238.\n开源实现\n FreeOTP。 Google Authenticator。  "});index.add({'id':3,'href':'/idaas-book/references/windows-ad/','title':"安装AD域服务并启用LDAPS",'content':"说明：此步骤仅仅是为了如何快速搭建起一个测试版 Windows AD 服务，不可用于生产。\n前置条件 安装 Windows AD 域控服务器，需要提前准备：\n Windows Server 2008 及更新版本操作系统，如 4 核 8G 内存，60G 硬盘的主机一台。 提前规划好域名，比如本示例为 iam.nxest.local.  Windows Server 不同版本略有差异，但是基本要做的就是下面几项：\n 启用功能：角色和功能里添加 Windows AD 域服务。 配置：配置 AD 域名、管理员密码等基本信息。  Windows Server 2012 步骤如下   点击开始菜单，找到“服务器管理器”，打开，显示如下界面。 \n  点击右上角 管理\u0026gt;“添加角色和功能”按钮，弹出如下界面。 \n  选择“基于角色或基于功能的安装”，然后点“下一步”。 \n  服务器选择这里选择默认的，假如你需要针对其它主机安装 AD 角色，这里可以选择你需要的主机，点击“下一步”。 \n  这里勾选“Active Directory 域服务”。 \n  当勾选这个选项时，会弹出对话框，点“添加功能”，在功能这个选项卡直接点下一步，一直下一步直到最后一步点击安装。 \n  安装成功后我们点击“关闭”，但这还没有完全安装成功，还需要继续配置。点击服务器右上角的“功能按钮”, 弹出继续配置 AD 的对话框。 \n  根据提示，添加新林，输入准备好的域名。 \n  林功能级别选择最高的版本。 \n  输入 NetBIOS 域名，都是简称，一般是你准备的域名的第一位。 \n  下一步，默认即可。\n  下一步，先决条件检查，可能花费 10 分钟左右，请耐心等待。 \n  检查通过后才能点击安装。 \n  安装完成后，会提示注销重启，如果未提示重启，请手动重启下服务器。 \n  用户管理 安装完成后，可通过“Active Directory 用户和计算机”管理用户。此功能可通过控制面板或菜单搜索到。\n打开后即可在 Users 下右键创建组和用户，请根据需要提前划分分组，增加用户。\n"});index.add({'id':4,'href':'/idaas-book/keycloak/security-features/password-policies/','title':"密码策略",'content':"密码策略，常见的如密码最小长度、必须包含特殊字符、密码不能与历史密码相同等。控制用户在修改密码时，新密码必须满足一定的条件，从而增强密码安全。\nKeycloak 内置了丰富的密码策略，满足常用的需求，不过默认都是不启用的，需要管理员主动设置。\n启用方式，单击 Authentication 菜单，选择 Password Policy 选项卡。 在右侧下拉列表框中选择要添加的策略。根据策略提示设置不同的参数，保存。\n密码策略只对新创建用户，或者用户修改密码生效，对已有用户不生效。如果想更快生效，就强制用户必须修改密码，在用户的 Required User Actions 里增加 Update Password 。\n密码策略类型   HashAlgorithm\n哈希算法，密码加密算法，以此算法存储，可根据官方指导自己实现算法。\n  Hashing Iterations\n哈希次数，指定密码在存储或验证之前被哈希的次数。 多次哈希防止数据库泄露后，密码被暴力破解。哈希次数越多安全性越高，性能越差。\n  Minimum Length\n密码最小长度。加大密码长度才是最有效的安全措施，什么大小写数字都是骗人的。\n  Digits\n密码里必须包含 N 个数字。\n  Lowercase Characters\n密码里必须包含 N 个小写字母。\n  Uppercase Characters\n密码里必须包含 N 个大写字母。\n  Special Characters\n密码里必须包含 N 个特殊字符，特殊字符如 ?!#%$ 。\n  Not Username\n不能是当前用户名。\n  Not Email\n不能是当前用户的邮箱。\n  Regular Expression\n正则表达式，用 java.util.regex.Pattern 解析。\n  Expire Password\n密码有效期，过期时间， N 天。超过这个时间后，用户必须修改密码。\n  Not Recently Used\n密码历史，不能是最近使用过的 N 个密码。\n  Password Blacklist\n密码黑名单，比如不能是常见的 admin,test,123456 等等，通过文件定制黑名单列表。\n  "});index.add({'id':5,'href':'/idaas-book/keycloak/troubleshooting/https-required/','title':"Https Required",'content':"问题描述 以 Http 方式登录，页面错误提示如下。\nWe're sorry... HTTPS required.\n问题原因 keycloak 各个 Realm 默认的登录设置里，Require SSL 为 external requests，对于外部请求，必须是 Https。 非外部请求，也就是私有地址，可以是 http，如：localhost, 127.0.0.1, 10.x.x.x, 192.168.x.x, 172.16.x.x。 详细参考官方文档说明。\n解决方案   配置 https 并使用 https 登录，毫无疑问，这是正确的解决方案。\n  如果只是测试环境，可以修改 Realm 的设置，Require SSL 改为 none。\n  修改数据方式\nupdate REALM set ssl_required=\u0026#39;NONE\u0026#39; where id = \u0026#39;master\u0026#39;;   K8S 命令行调用 keycloak 官方 admin 工具 kcadm 修改\n# login with a admin user kubectl exec -it keycloak-pod -- /opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin-password # update your realm config kubectl exec -it keycloak-pod -- /opt/jboss/keycloak/bin/kcadm.sh update realms/master -s sslRequired=none     "});index.add({'id':6,'href':'/idaas-book/keycloak/troubleshooting/liquibase-mysql-group-replication/','title':"Liquibase MGR",'content':"问题描述 Keycloak 对接的是一个 MGR(mysql group replication)的集群，安装时出错，数据初始化失败。\n查看 keycloak 启动日志，错误信息大致如下。\nINFO [org.keycloak.connections.jpa.updater.liquibase.LiquibaseJpaUpdaterProvider] (ServerService Thread Pool -- 66) Initializing database schema. Using changelog META-INF/jpa-changelog-master.xml ERROR [org.keycloak.connections.jpa.updater.liquibase.conn.DefaultLiquibaseConnectionProvider] (ServerService Thread Pool -- 66) Change Set META-INF/jpa-changelog-1.0.0.Final.xml:: 1.0.0.Final-KEYCLOAK-5461::sthorger@redhat.com failed. Error: Table 'APPLICATION_DEFAULT_ROLES' already exists [Failed SQL: CREATE TABLE keycloak.APPLICATION_DEFAULT_ROLES (APPLICATION_ID VARCHAR(36) NOT NULL, ROLE_ID VARCHAR(36) NOT NULL)] FATAL [org.keycloak.services] (ServerService Thread Pool -- 66) java.lang.RuntimeException: Failed to update database INFO [org.jboss.as.server] (Thread-2) WFLYSRV0220: Server shutdown has been requested via an OS signal 查看 MySQL 日志，看到如下错误。\n[ERROR] Plugin group_replication reported: 'Table DATABASECHANGELOG does not have any PRIMARY KEY. This is not compatible with Group Replication' 问题原因 根据 MySQL 日志，很明确了是因为 DATABASECHANGELOG 没有主键。MySQL group replication 要求表必须有主键或者非 Null 的唯一索引。\nkeycloak 使用 Liquibase 初始化数据。Liquibase 自动创建的 DATABASECHANGELOG 表没有主键，主要是为了避免特定数据库 key 的长度限制。查看 Liquibase 官方说明，“id”, “author”, “filename”可以作为唯一索引。\n解决方案 解决办法也很简单，在 keycloak 启动之前，提前创建好 DATABASECHANGELOG 表并增加主键（或唯一性索引）。\nCREATE TABLE `DATABASECHANGELOG` ( `ID` varchar(255) NOT NULL, `AUTHOR` varchar(255) NOT NULL, `FILENAME` varchar(255) NOT NULL, `DATEEXECUTED` datetime NOT NULL, `ORDEREXECUTED` int(11) NOT NULL, `EXECTYPE` varchar(10) NOT NULL, `MD5SUM` varchar(35) DEFAULT NULL, `DESCRIPTION` varchar(255) DEFAULT NULL, `COMMENTS` varchar(255) DEFAULT NULL, `TAG` varchar(255) DEFAULT NULL, `LIQUIBASE` varchar(20) DEFAULT NULL, `CONTEXTS` varchar(255) DEFAULT NULL, `LABELS` varchar(255) DEFAULT NULL, `DEPLOYMENT_ID` varchar(10) DEFAULT NULL, PRIMARY KEY (`ID`,`AUTHOR`,`FILENAME`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; "});index.add({'id':7,'href':'/idaas-book/','title':"IDaaS Book",'content':"  \nA book about identity as a service (IDaaS).\n一本关于身份即服务的书，翻译和汇总 IAM、IDaaS、OAuth2 等相关专业知识，介绍相关的 keycloak、CAS、Dex 等软件，记录使用中遇到的问题和解决方案。\nLicense Licensed under CC BY-NC 4.0. 2020-2024 nxest.com.\n"});index.add({'id':8,'href':'/idaas-book/keycloak/','title':"Keycloak",'content':""});index.add({'id':9,'href':'/idaas-book/keycloak/troubleshooting/','title':"Troubleshooting",'content':""});index.add({'id':10,'href':'/idaas-book/references/','title':"参考资料",'content':""});index.add({'id':11,'href':'/idaas-book/keycloak/security-features/','title':"安全增强功能",'content':""});index.add({'id':12,'href':'/idaas-book/keycloak/security-features/brute-force-detection/','title':"暴力检测",'content':"Brute Force Detection 暴力检测，防止密码暴力破解，登录失败 N 次锁定。\n启用暴力检测 控制台选择 Realm，设置：Realm Settings -\u0026gt; Security Defenses -\u0026gt; Brute Force Detection。\n\n  Permanent Lockout\nON 表示永久锁定。\nOFF 表示临时锁定。\n  Max Login Failures\n登录失败达到多少次时，锁定账号。\n  Quick Login Check Milli Seconds\n快速登录检测，两次登录请求之间的时间间隔（单位毫秒）小于该值时，则认定为快速登录。\n  Minimum Quick Login Wait\n一旦被认定为快速登录，该账号将被临时锁定为该配置项配置的时长。\n  解除锁定   临时锁定用户，达到锁定时长后，会自动解锁。\n  管理员在用户列表或用户详情里可以手动解锁。\n\n  注意事项  失败次数统计仅与登录账号相关，与会话无关，关闭重启浏览器，次数不会重置。 用户锁定后，给出的错误提示还是默认的用户名密码错误，就是不想让攻击者知道用户暂时被禁用了。  "});index.add({'id':13,'href':'/idaas-book/keycloak/admin-api/','title':"Admin API",'content':""});index.add({'id':14,'href':'/idaas-book/categories/','title':"Categories",'content':""});index.add({'id':15,'href':'/idaas-book/tags/','title':"Tags",'content':""});index.add({'id':16,'href':'/idaas-book/keycloak/admin-api/user-end2end/','title':"用户增删改查",'content':"Keycloak Admin REST API，curl 模拟用户增加修改删除的完整例子。\n#!/bin/bash  HOST_IP=127.0.0.1 HOST_NAME=keycloak.example DEFAULT_REALM=master ADMIN_API_URL=http://${HOST_IP}/auth/admin/realms/${DEFAULT_REALM} USER_API_URL=${ADMIN_API_URL}/users # admin user ADMIN_NAME=xxx ADMIN_PWD=xxx parse_json() { echo \u0026#34;${1//\\\u0026#34;/}\u0026#34; | sed \u0026#34;s/.*$2:\\([^,}]*\\).*/\\1/\u0026#34; } echo \u0026#34;====Begin test user CRUD====\u0026#34; token_url=http://${HOST_IP}/auth/realms/${DEFAULT_REALM}/protocol/openid-connect/token # Get token, a json token_json=$(curl -X POST \\ \t-H \u0026#34;host:${HOST_NAME}\u0026#34; \\ \t-H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \\ \t${token_url} \\ \t--data \u0026#39;grant_type=password\u0026#39; \\ \t--data \u0026#39;client_id=admin-cli\u0026#39; \\ \t--data \u0026#34;username=${ADMIN_NAME}\u0026#34; \\ \t--data \u0026#34;password=${ADMIN_PWD}\u0026#34;) # get the `access_token` from the json token=$(parse_json \u0026#34;$token_json\u0026#34; \u0026#34;access_token\u0026#34;) # List users curl -X GET -H \u0026#34;Authorization: Bearer ${token}\u0026#34; \\ \t-H \u0026#34;host:${HOST_NAME}\u0026#34; \\ \t${USER_API_URL} -v # Add new user username=usertest$(date \u0026#34;+%Y%m%d%H%M%S%s\u0026#34;) user={\\\u0026#34;enabled\\\u0026#34;:true,\\\u0026#34;attributes\\\u0026#34;:{},\\\u0026#34;username\\\u0026#34;:\\\u0026#34;${username}\\\u0026#34;,\\\u0026#34;emailVerified\\\u0026#34;:\\\u0026#34;\\\u0026#34;} echo \u0026#34;Begin create new user ${username}.\u0026#34; user_create_rsp=$(curl -i -s -H \u0026#34;Authorization: Bearer ${token}\u0026#34; \\ \t-H \u0026#34;host:${HOST_NAME}\u0026#34; \\ \t-H \u0026#34;Content-Type: application/json\u0026#34; \\ \t--data \u0026#34;${user}\u0026#34; \\ \t${USER_API_URL} --stderr -) # Get user id full url from response header `Location` # \u0026lt; Location: http://xxxx/users/9e901054-bbc7-47db-8a68-4a13474a1080 # The `tr -d` is to fix `Error curl: (3) URL using bad/illegal format or missing URL` user_id_url=$(echo \u0026#34;${user_create_rsp}\u0026#34; | grep -Fi Location | tr -d \u0026#39;\\r\u0026#39; | awk \u0026#39;{print $2}\u0026#39;) # Get only the id from the url user_id=$(echo ${user_id_url} | awk -F\u0026#39;/\u0026#39; \u0026#39;{print $NF}\u0026#39;) echo \u0026#34;User id is ${user_id}.\u0026#34; # Delete user by id curl -X DELETE -H \u0026#34;Authorization: Bearer ${token}\u0026#34; \\ \t-H \u0026#34;host:${HOST_NAME}\u0026#34; \\ \t-H \u0026#34;Content-Type: application/json\u0026#34; \\ \t\u0026#34;${USER_API_URL}/${user_id}\u0026#34; echo \u0026#34;====End test user CRUD====\u0026#34; "});})();